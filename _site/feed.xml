<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2021-09-09T22:19:57-05:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Glimmer</title><subtitle>Things that I am thinking about or learning (either through reading or by school of hard knocks). These are my personal thoughts and not necessarily the positions or thoughts of any organization I am associated with.</subtitle><author><name>David Green</name></author><entry><title type="html">Finally Moving On</title><link href="http://localhost:4000/blog/2021/09/09/finally-moving-on" rel="alternate" type="text/html" title="Finally Moving On" /><published>2021-09-09T01:20:00-05:00</published><updated>2021-09-09T01:20:00-05:00</updated><id>http://localhost:4000/blog/2021/09/09/finally-moving-on</id><content type="html" xml:base="http://localhost:4000/blog/2021/09/09/finally-moving-on">&lt;p&gt;After eight years of using Octopress, this site is moving to a purer &lt;a href=&quot;https://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt; blog using &lt;a href=&quot;https://mademistakes.com/work/minimal-mistakes-jekyll-theme/&quot;&gt;Minimal Mistakes Theme&lt;/a&gt;.  I have previously written about the problems of keeping it going (&lt;a href=&quot;/blog/2014/09/01/waiting-on-migration-tools-for-octopress-3&quot;&gt;1&lt;/a&gt;, &lt;a href=&quot;/blog/2019/12/16/limping-along-with-octopress-and-catalina-macos&quot;&gt;2&lt;/a&gt;) and have looked at alternatives several times.  Recently I built a couple of other small websites using Jekyll.  The straw that moved me to action was discovering that the JQuery version used had several security issues.  Rather than work through that problem with the likelihood of other problems, I decided to experiment with moving my content.&lt;/p&gt;

&lt;p&gt;Markdown provides a lot of portability.  I now use &lt;a href=&quot;https://code.visualstudio.com&quot;&gt;VSCode&lt;/a&gt; as my primary editor, and it has a great “Find in Files” and “Replace in Files” that allows making modifications to existing content.  This content goes back to 2008 with original hosting on Tumblr (&lt;a href=&quot;/blog/2007/04/08/congratulations-on-bringing-light-into-the-dark-room&quot;&gt;in&lt;/a&gt;, &lt;a href=&quot;/blog/2013/05/27/Tumbling-out&quot;&gt;out&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;I will likely find items to repair, create a better home page, and rationalize categories and tags, but it looks like I can preserve the permalinks so that URLs still work.&lt;/p&gt;

&lt;p&gt;It looks like categories should be limited (perhaps related to roles) with many more tags.  Each tag will start with a number sign (#).&lt;/p&gt;

&lt;p&gt;Perhaps the roles can be teach, developer, productivity, personal, and citizen.&lt;/p&gt;</content><author><name>David Green</name></author><category term="blog" /><category term="#omnipress" /><category term="#jekyll" /><summary type="html">After eight years of using Octopress, this site is moving to a purer Jekyll blog using Minimal Mistakes Theme. I have previously written about the problems of keeping it going (1, 2) and have looked at alternatives several times. Recently I built a couple of other small websites using Jekyll. The straw that moved me to action was discovering that the JQuery version used had several security issues. Rather than work through that problem with the likelihood of other problems, I decided to experiment with moving my content.</summary></entry><entry><title type="html">Update to Using Maven to Build Executable Jar Files</title><link href="http://localhost:4000/blog/2021/07/13/update-to-using-maven-to-build-executable-jar-files" rel="alternate" type="text/html" title="Update to Using Maven to Build Executable Jar Files" /><published>2021-07-13T22:26:00-05:00</published><updated>2021-07-13T22:26:00-05:00</updated><id>http://localhost:4000/blog/2021/07/13/update-to-using-maven-to-build-executable-jar-files</id><content type="html" xml:base="http://localhost:4000/blog/2021/07/13/update-to-using-maven-to-build-executable-jar-files">&lt;p&gt;This is an update to an &lt;a href=&quot;/blog/2019/09/15/onward-to-maven/&quot;&gt;earlier post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;At the time of writing, &lt;a href=&quot;https://netbeans.apache.org&quot;&gt;&lt;em&gt;Apache NetBeans&lt;/em&gt;&lt;/a&gt; is at version 12.4 and there are several suppliers of JDKs.  The latest LTS (Long Term Support) version is JDK 11 and the latest MTS (Medium Term Support) is JDK15.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://maven.apache.org&quot;&gt;Apache Maven&lt;/a&gt; remains the preferred build automation from for new projects.&lt;/p&gt;

&lt;p&gt;One area that is remains unpolished (IMO) is the building of a &lt;em&gt;jar&lt;/em&gt; file that can be run from the command line.  The menu process “Run ▶ Clean and Build Main Project” will build a &lt;em&gt;jar&lt;/em&gt; file but it won’t configure the manifest so that&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;java -jar jarfile.jar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;works even when the JDK (or JRE) is on the command line.&lt;/p&gt;

&lt;p&gt;The solution discussed in the earlier post involving the modification of POM (Project Object Model) file is still viable.  It is under the Project Files folder in the Project View in NetBeans.  Load the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pom.xml&lt;/code&gt; file into the NetBeans editor.&lt;/p&gt;

&lt;p&gt;Quoting from the &lt;a href=&quot;https://www.moreofless.co.uk/executable-jar-netbeans-maven-no-main-manifest-attribute/&quot;&gt;source article&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;You need to add the following XML snippet to your pom.xml, it can go anywhere inside the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;project&amp;gt;&lt;/code&gt; element, I usually put it after the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;properties&amp;gt;&lt;/code&gt; element:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;build&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;plugins&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.maven.plugins&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;maven-jar-plugin&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;3.2.0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;archive&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;nt&quot;&gt;&amp;lt;manifest&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;nt&quot;&gt;&amp;lt;addClasspath&amp;gt;&lt;/span&gt;true&lt;span class=&quot;nt&quot;&gt;&amp;lt;/addClasspath&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;nt&quot;&gt;&amp;lt;mainClass&amp;gt;&lt;/span&gt;MAIN CLASS GOES HERE&lt;span class=&quot;nt&quot;&gt;&amp;lt;/mainClass&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/manifest&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/archive&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/plugins&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Just replace &lt;strong&gt;MAIN CLASS GOES HERE&lt;/strong&gt; with your main class (with it’s package prefix), rebuild and your JAR is now runnable. If you are unsure what to put here, just copy the Main Class settings from the Run tab in your Netbeans Project Properties.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The version number above has been updated to 3.2.0 matching the latest version of the maven-jar-plugin.&lt;/p&gt;

&lt;p&gt;After you do this, you can use “Run ▶ Clean and Build Main Project” in NetBeans to build the &lt;em&gt;jar&lt;/em&gt; file.  By changing to the Files view (instead of the Project View), you can see the target directory.&lt;/p&gt;

&lt;p&gt;The name of the &lt;em&gt;jar&lt;/em&gt; file will be dependent on your configuration, your project setup but in my habits project, it was &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;habits-1.0-SNAPSHOT.jar&lt;/code&gt; which one can run from the terminal with&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;java &lt;span class=&quot;nt&quot;&gt;-jar&lt;/span&gt; habits-1.0-SNAPSHOT.jar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;assuming that Java has been set up to run at the command line (or you are using the terminal inside NetBeans.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; that the target directory is erased as part of the clean process of “Run ▶ Clean and Build Main Project” so you will need to close anything that has files in that space open before re-running the clean process.&lt;/p&gt;

&lt;h2 id=&quot;maven-shade-plugin&quot;&gt;Maven Shade plugin&lt;/h2&gt;

&lt;p&gt;In a &lt;a href=&quot;https://www.baeldung.com/executable-jar-with-maven&quot;&gt;baeldung article&lt;/a&gt;, other solutions for making executable jar files are discussed.  The Maven Shade Plugin allows one to include dependent jar files inside the executable jar although you still need the JDK/JRE installed on the execution machine.&lt;/p&gt;

&lt;p&gt;To use this approach, you edit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pom.xml&lt;/code&gt; as above but include the following instead&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.maven.plugins&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;maven-shade-plugin&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;executions&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;execution&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;goals&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;goal&amp;gt;&lt;/span&gt;shade&lt;span class=&quot;nt&quot;&gt;&amp;lt;/goal&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/goals&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;shadedArtifactAttached&amp;gt;&lt;/span&gt;true&lt;span class=&quot;nt&quot;&gt;&amp;lt;/shadedArtifactAttached&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;transformers&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;transformer&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;implementation=&lt;/span&gt;
                      &lt;span class=&quot;s&quot;&gt;&quot;org.apache.maven.plugins.shade.resource.ManifestResourceTransformer&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;nt&quot;&gt;&amp;lt;mainClass&amp;gt;&lt;/span&gt;MAIN CLASS GOES HERE&lt;span class=&quot;nt&quot;&gt;&amp;lt;/mainClass&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;/transformer&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/transformers&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/execution&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/executions&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;and insert the full name with package (but not .class) of the class contains the main method inside the &lt;mainClass&gt; container.&lt;/mainClass&gt;&lt;/p&gt;</content><author><name>David Green</name></author><category term="developer" /><category term="Java" /><category term="NetBeans" /><summary type="html">This is an update to an earlier post.</summary></entry><entry><title type="html">Big Sur’s Finder Copy change broke my Keyboard Maestro macro</title><link href="http://localhost:4000/blog/2021/04/06/big-surs-finder-copy-change-broke-my-keyboard-maestro-macro" rel="alternate" type="text/html" title="Big Sur’s Finder Copy change broke my Keyboard Maestro macro" /><published>2021-04-06T22:47:00-05:00</published><updated>2021-04-06T22:47:00-05:00</updated><id>http://localhost:4000/blog/2021/04/06/big-surs-finder-copy-change-broke-my-keyboard-maestro-macro</id><content type="html" xml:base="http://localhost:4000/blog/2021/04/06/big-surs-finder-copy-change-broke-my-keyboard-maestro-macro">&lt;p&gt;In Catalina, Copy in Finder gets the path of a file.  In Big Sur, it only gets the filename.  One can hold down ⌥+⌘+C (or ⌥ and select Copy from the Finder menu) to copy the pathname but Keyboard Maestro does not “Copy as pathname” as an action or option of its Copy action.&lt;/p&gt;

&lt;p&gt;I had built  ⌃+⌥+⌘+U to put a URL style address of a file or folder currently select in  Finder to the clipboard.   I used to paste in file references that I could later reference as noted in a &lt;a href=&quot;/docs/macos/productivity/open-by-highlighted-url/&quot;&gt;prior note&lt;/a&gt; but the upgrade to Big Sur broke this.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;I had used&lt;/p&gt;

&lt;figure class=&quot;&quot;&gt;
  &lt;img src=&quot;/assets/images/20210406-old-kbm.png&quot; alt=&quot;My Broken Keyboard Maestro Macro&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;but as I note above Finder’s interpretation of Copy has changed.&lt;/p&gt;

&lt;p&gt;I could not find a Copy Pathname option in Keyboard Maestro (or anyone mentioning the change in Finder).  I tried asserting the modifier ⌥ with press and hold but it did not seem to modify the copy behavior.  I tried sending the key ⌥+⌘+C to finder but it seem to bring up Keyboard Maestro like ⌥+space does.&lt;/p&gt;

&lt;figure class=&quot;&quot;&gt;
  &lt;img src=&quot;/assets/images/20210406-new-kbm.png&quot; alt=&quot;My Updated Keyboard Maestro Macro&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;This works but it does have a side affect of processing each of the selected items (with the clipboard left with the final result.  To be honest, that may have been the behavior of the old process under Catalina as a multiple selection was not tried.&lt;/p&gt;</content><author><name>David Green</name></author><category term="computing" /><category term="#macOS" /><summary type="html">In Catalina, Copy in Finder gets the path of a file.  In Big Sur, it only gets the filename.  One can hold down ⌥+⌘+C (or ⌥ and select Copy from the Finder menu) to copy the pathname but Keyboard Maestro does not “Copy as pathname” as an action or option of its Copy action.</summary></entry><entry><title type="html">Dark Sky - Weather App</title><link href="http://localhost:4000/blog/2021/02/16/dark-sky-weather-app" rel="alternate" type="text/html" title="Dark Sky - Weather App" /><published>2021-02-16T23:40:00-06:00</published><updated>2021-02-16T23:40:00-06:00</updated><id>http://localhost:4000/blog/2021/02/16/dark-sky-weather-app</id><content type="html" xml:base="http://localhost:4000/blog/2021/02/16/dark-sky-weather-app">&lt;style&gt;div img { padding: 10px; width: 180px; }&lt;/style&gt;

&lt;p&gt;Like many, I have started looking at the additional detail on data privacy on my iOS apps.  I was shocked to see that my Weather App was tracking my Health &amp;amp; Fitness in ddition to more reasonable information such as location.  And, it was sharing this information with other companies websites according to their self-reporting.  I decided to look for alternatives.&lt;/p&gt;

&lt;p&gt;I found Dark Sky – an unusual name for a weather app but it reported only linking identifiers and location to me and not sharing that with other companies.  It had recently become an Apple app as well.&lt;/p&gt;

&lt;p&gt;It, of course, was different from the App I had been using and the preinstalled Apple Weather App.  I have grown to like it over the last week as I figured how to find the things I wanted to see.&lt;/p&gt;

&lt;div style=&quot;float:left;&quot;&gt;
&lt;figure class=&quot;&quot;&gt;
  &lt;img src=&quot;/assets/images/20210216-darksky-main.jpeg&quot; alt=&quot;Dark Sky's Main Screen&quot; /&gt;&lt;/figure&gt;

&lt;/div&gt;

&lt;h2 id=&quot;dark-skys-main-screen&quot;&gt;Dark Sky’s Main Screen&lt;/h2&gt;

&lt;p&gt;The Dark Sky main screen has present temperature including “Feels Like” and an icon, any warnings, a small map, rain (or snow), and cloud forecast for the next several hours as a graph down the page.  At the top is the location which can be selected (as it is this example) or driven by the present location.  Hitting the magnifying glass lets one choose other locations.  Saved locations can be accessed by swiping right or left on the main screen.&lt;/p&gt;

&lt;div style=&quot;clear: both;&quot;&gt;&lt;/div&gt;

&lt;div style=&quot;float: right;&quot;&gt;
&lt;figure class=&quot;&quot;&gt;
  &lt;img src=&quot;/assets/images/20210216-darksky-week.jpeg&quot; alt=&quot;Dark Sky's Upcoming Forecast&quot; /&gt;&lt;/figure&gt;

&lt;/div&gt;

&lt;h2 id=&quot;dark-skys-upcoming-forecast&quot;&gt;Dark Sky’s Upcoming Forecast&lt;/h2&gt;

&lt;p&gt;Scrolling down this screen gets you to the forecast for the next 7 days which includes the same information in a compact form.  Any of the days may be tapped to expand them to look like the present day detail.  Note towards the bottom is a “TIME MACHINE” link which will allow one to see forward or back in time.&lt;/p&gt;

&lt;div style=&quot;clear: both;&quot;&gt;&lt;/div&gt;

&lt;div style=&quot;float: left;&quot;&gt;
&lt;figure class=&quot;&quot;&gt;
  &lt;img src=&quot;/assets/images/20210216-darksky-radar.jpeg&quot; alt=&quot;Dark Sky's Radar View&quot; /&gt;&lt;/figure&gt;

&lt;/div&gt;

&lt;h2 id=&quot;dark-skys-radar-view&quot;&gt;Dark Sky’s Radar View&lt;/h2&gt;

&lt;p&gt;One can tap on the map of the main screen or on the Map at the bottom of screen to see the precipation or temperature map for the current area.  At the bottom is a player control that one see the history of the last three and a half hours and the prediction for the next half hour play out on the screen.&lt;/p&gt;

&lt;div style=&quot;clear: both;&quot;&gt;&lt;/div&gt;

&lt;div style=&quot;float:right;&quot;&gt;
&lt;figure class=&quot;&quot;&gt;
  &lt;img src=&quot;/assets/images/20210216-darksky-world.jpeg&quot; alt=&quot;Dark Sky's Radar View (zoomed out)&quot; /&gt;&lt;/figure&gt;

&lt;/div&gt;

&lt;h2 id=&quot;dark-skys-radar-view-zoomed-out&quot;&gt;Dark Sky’s Radar View (zoomed out)&lt;/h2&gt;

&lt;p&gt;Using the pinch (or unpinch if that is the opposite), one can adjust the zoom level of the map.  As you can see, it is possible to get a world view of the weather.  One can also drag to move what area the map is showing which turns into spinning the globe when one is at zoomed out far enough to get the world view.&lt;/p&gt;

&lt;div style=&quot;clear: both;&quot;&gt;&lt;/div&gt;

&lt;p&gt;All in all, it was successful migration in terms of features as well as privacy.&lt;/p&gt;</content><author><name>David Green</name></author><category term="privacy" /><category term="personal" /><category term="#application" /><summary type="html"></summary></entry><entry><title type="html">Open Selection by highlighted URL</title><link href="http://localhost:4000/blog/2020/12/29/open-by-highlighted-url" rel="alternate" type="text/html" title="Open Selection by highlighted URL" /><published>2020-12-29T11:07:00-06:00</published><updated>2020-12-29T11:07:00-06:00</updated><id>http://localhost:4000/blog/2020/12/29/open-by-highlighted-url</id><content type="html" xml:base="http://localhost:4000/blog/2020/12/29/open-by-highlighted-url">&lt;p&gt;In Evernote 10, I have lost the ability to include general URLs as linked items.  The links already in a note still work but Evernote 10 does not allow the insertion of new links. While not perfect, Keyboard Maestro on macOS can mitigate some of the missing behavior for Mac users.&lt;/p&gt;

&lt;p&gt;I chose to add a shortcut ⌃⌥⌘O (O for open) to open the highlighted text treating it as a URL.  It easily accomplished with Keyboard Maestro.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/kb-cntl-opt-cmd-o.png&quot; alt=&quot;Keyboard Maestro Command&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This has made things much more bearable. I still hope Evernote will reconsider their decision on URLs since I think both macOS and Windows (at least) support this type of behavior and having the URL visible in the note distracts from the readability of the note.&lt;/p&gt;</content><author><name>David Green</name></author><category term="computing" /><category term="#Evernote" /><category term="#macOS" /><summary type="html">In Evernote 10, I have lost the ability to include general URLs as linked items. The links already in a note still work but Evernote 10 does not allow the insertion of new links. While not perfect, Keyboard Maestro on macOS can mitigate some of the missing behavior for Mac users.</summary></entry><entry><title type="html">Using localstorage between Browser Windows</title><link href="http://localhost:4000/blog/2020/12/26/using-localstorage-between-browser-windows" rel="alternate" type="text/html" title="Using localstorage between Browser Windows" /><published>2020-12-26T16:10:00-06:00</published><updated>2020-12-26T16:10:00-06:00</updated><id>http://localhost:4000/blog/2020/12/26/using-localstorage-between-browser-windows</id><content type="html" xml:base="http://localhost:4000/blog/2020/12/26/using-localstorage-between-browser-windows">&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;There are several ways to communicate between browser windows&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Server conversation (async, network delays)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localstorage&lt;/code&gt; (sync)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BroadcastChannel&lt;/code&gt; (most modern, does not appear to be supported in Safari)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IndexedDB&lt;/code&gt; (async)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It looks like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localstorage&lt;/code&gt; will do for the current application’s purposes of launching another window to do some work and then report back a limited amount of information and closing.&lt;/p&gt;

&lt;h2 id=&quot;structure&quot;&gt;Structure&lt;/h2&gt;

&lt;p&gt;The remote client window uses &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localstorage.setItem(key,value)&lt;/code&gt; to talk back to main window.  Both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;key&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;value&lt;/code&gt; must be strings.  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JSON.stringify(object)&lt;/code&gt; may help.&lt;/p&gt;

&lt;p&gt;Main window uses &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;window.addEventListener(&quot;storage&quot;, storageEventHandler, false)&lt;/code&gt; to register the function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;storageEventHandler(evt)&lt;/code&gt; to be notified when the storage is modified.  The main window can then examine &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;evt.key&lt;/code&gt; to get the key of the item in local storage that changed and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;evt.newValue&lt;/code&gt; to get the new value of the changed item.  Alternately, if only one key is in involved, the main window can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localStorage.getItem(key)&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;demo-code&quot;&gt;Demo Code&lt;/h2&gt;

&lt;p&gt;The demo must run in a server context not file:// and the browser windows should not be in “private” mode.&lt;/p&gt;

&lt;h3 id=&quot;simulation-of-main-window-launch-this-then-hit-read-link-to-launch-client&quot;&gt;Simulation of main window (launch this, then hit “read” link to launch client)&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;body&amp;gt;
  &amp;lt;h1&amp;gt;Web localStorage (read)&amp;lt;/h1&amp;gt;
  &amp;lt;p&amp;gt;&amp;lt;a href=&quot;client.html&quot; target=&quot;_blank&quot;&amp;gt;Load Client&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
  &amp;lt;h1&amp;gt;&amp;lt;span id='theString'&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/h1&amp;gt;
&amp;lt;/body&amp;gt;

&amp;lt;script src=&quot;scriptRead.js&quot;&amp;gt;&amp;lt;/script&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Body of HTML page&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;use strict&quot;;

window.addEventListener(&quot;storage&quot;, storageEventHandler, false);
const answerFieldSpan = document.getElementById(&quot;theString&quot;);

function storageEventHandler(evt) {
  // let theString = localStorage.getItem(&quot;theString&quot;);
  // answerFieldSpan.innerText = theString;

  answerFieldSpan.innerText = `${evt.key} : ${evt.newValue}`;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;JavaScript&lt;/p&gt;

&lt;h3 id=&quot;simulation-of-client-window-launched-by-main-window-or-manually&quot;&gt;Simulation of client window (launched by main window or manually)&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;body&amp;gt;
	&amp;lt;h1&amp;gt;Graphic Page Writing Back via Local Storage&amp;lt;/h1&amp;gt;
	&amp;lt;form action=&quot;&quot;&amp;gt;&amp;lt;/form&amp;gt;
	&amp;lt;label for=&quot;the-string&quot;&amp;gt;String to store:&amp;lt;/label&amp;gt;
	&amp;lt;input type=&quot;text&quot; name=&quot;saveValue&quot; id=&quot;the-string&quot;&amp;gt;
	&amp;lt;button id='save'&amp;gt;Save&amp;lt;/button&amp;gt;
&amp;lt;/body&amp;gt;

&amp;lt;script src=&quot;scriptSet.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Body of HTML page&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;use strict&quot;;

let theString = &quot;stop&quot;;
let check;

const saveButton = document.getElementById(&quot;save&quot;);
const theStringField = document.getElementById(&quot;the-string&quot;);

saveButton.onclick = (ev) =&amp;gt; {
  theString = theStringField.value;
  localStorage.setItem(&quot;theString&quot;, theString);
  check = localStorage.getItem(&quot;theString&quot;);
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;JavaScript&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://html.spec.whatwg.org/multipage/webstorage.html&quot;&gt;HTML Standard&lt;/a&gt; (webstorage)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://thewebdev.info/2020/04/03/use-localstorage-to-store-data-on-the-browser/&quot;&gt;How To Use LocalStorage to Store Data in the Browser - The Web Dev&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://web.dev/storage-for-the-web/&quot;&gt;Storage for the web&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://michalzalecki.com/why-using-localStorage-directly-is-a-bad-idea/&quot;&gt;Why using localStorage directly is a bad idea - Michal Zalecki&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jonathanmh.com/use-ios-safari-localstorage-sessionstorage-private-mode/&quot;&gt;How to use iOS Safari localStorage and sessionStorage in Private Mode - JonathanMH&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;[Broadcast Channel API - Web APIs&lt;/td&gt;
          &lt;td&gt;MDN](https://developer.mozilla.org/en-US/docs/Web/API/Broadcast_Channel_API)&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/28230845/communication-between-tabs-or-windows&quot;&gt;Communication between tabs or windows - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>David Green</name></author><category term="developer" /><summary type="html">Overview</summary></entry><entry><title type="html">Making BookMarked PDFs from Google Docs</title><link href="http://localhost:4000/blog/2020/05/25/making-bookmarked-pdfs-from-google-docs" rel="alternate" type="text/html" title="Making BookMarked PDFs from Google Docs" /><published>2020-05-25T11:28:00-05:00</published><updated>2020-05-25T11:28:00-05:00</updated><id>http://localhost:4000/blog/2020/05/25/making-bookmarked-pdfs-from-google-docs</id><content type="html" xml:base="http://localhost:4000/blog/2020/05/25/making-bookmarked-pdfs-from-google-docs">&lt;p&gt;&lt;strong&gt;Updated:&lt;/strong&gt; 10 June 2020 removed LibreOffice as tool, comments about Word Online&lt;/p&gt;

&lt;p&gt;This post focuses on ensuring that the Table of Contents, as set up using Google Docs index, are transferred into the bookmark metadata of the PDF file. This can not be done by simplifying downloading a Google Doc as a PDF. One must export to a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.docx&lt;/code&gt; file and use Word, &lt;del&gt;Writer,&lt;/del&gt; or Pages to produce the PDF file using the correct options for each program.&lt;/p&gt;

&lt;p&gt;Using macOS Preview as the PDF reader, we want the left sidebar when one selects Table of Contents to show the Table of Contents as bookmarks that allow quick access to the page where the content is.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/sidebar-toc.png&quot; alt=&quot;Preview showing sidebar with Table of Contents selected and results&quot; /&gt;&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;p&gt;I have chosen Google Docs to maintain the IEEE Region 3 Operations Manual. IEEE is a GSuite organization, and I feel that using GoogleDocs had the best potential for promoting collaboration on documents. Additionally, it provides a cloud-based approach for ensuring the source content is available over time. One issue that arises from this choice is the reduced feature set in Google Docs as compared to Microsoft Word, LibreOffice Writer, and Apple Pages. Google Docs is growing to support more features over time, and the others (especially Microsoft and Apple) are trying to ensure consistent feature sets across all platforms (desktop, smartphone, web) – the gap is closing.&lt;/p&gt;

&lt;h2 id=&quot;process-that-works&quot;&gt;Process that works&lt;/h2&gt;

&lt;p&gt;TLDR;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Google Doc → download as .docx → use word processor with bookmark/accessibility options → PDF&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The process that works is to download the file from Google Docs as a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.docx&lt;/code&gt; file. Then using Word, Writer, or Pages open the file and then export it to PDF choosing to use the accessibility options. My computer is a MacBook Pro 13 2018 and is presently running&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;MacOS Catalina 10.15.4&lt;/li&gt;
  &lt;li&gt;Microsoft Word 16.37 (from a Microsoft 365 subscription)&lt;/li&gt;
  &lt;li&gt;Microsoft Word365 (onlinee)&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;LibreOffice 6.4.4.2&lt;/del&gt;&lt;/li&gt;
  &lt;li&gt;Pages 10.0 (6748)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The result we are seeking is to have the table of contents information inserted and maintained in Google Docs. It should not only appear in the PDF page but also appear in the metadata of the PDF file so that users can quickly jump to those sections.&lt;/p&gt;

&lt;p&gt;After using the heading styles in your document to denote the structure, insert the table of contents in the appropriate part of your document using the menu option &lt;em&gt;Insert → Table of Contents&lt;/em&gt;. Choose to show numbers rather than links if you wish to support printed versions of the PDF. Make sure you are adding page numbers to your page (use the menu option &lt;em&gt;Insert → Page Numbers&lt;/em&gt;). The table of contents should now be visible in the document. Right-clicking on the table of contents allows you the option to refresh the table of contents after document changes. You should also be able to click on an entry and select the link to jump to that portion of the document for editing.&lt;/p&gt;

&lt;p&gt;Using the menu option &lt;em&gt;File → Download → Microsoft Word (.docx)&lt;/em&gt;, get a local machine copy of the document in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.docx&lt;/code&gt; form. The next step is to open it in your tool of choice and create the PDF.&lt;/p&gt;

&lt;h3 id=&quot;using-word&quot;&gt;Using Word&lt;/h3&gt;

&lt;p&gt;Open the downloaded &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.docx&lt;/code&gt; file in Word. Choose &lt;em&gt;File → Save As…&lt;/em&gt; and then select PDF as the File Format and choose to use the online service.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/word-pdf.png&quot; alt=&quot;Using Word's File → SaveAs...&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Note that one can use the online version of Word also using the &lt;em&gt;File → Save As → Download as PDF&lt;/em&gt; option.&lt;/p&gt;

&lt;h3 id=&quot;using-libreoffice-writer&quot;&gt;&lt;del&gt;Using LibreOffice Writer&lt;/del&gt;&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;(removed)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;using-pages&quot;&gt;Using Pages&lt;/h3&gt;

&lt;p&gt;Open the downloaded &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.docx&lt;/code&gt; file in Pages. Choose &lt;em&gt;File → Export To → PDF…&lt;/em&gt; and choose to export using the accessibility option.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/pages-pdf.png&quot; alt=&quot;Using Pages's File → Export To → PDF...&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;issues-with-google-docs-export&quot;&gt;Issues with Google Docs export&lt;/h2&gt;

&lt;p&gt;The most desirable workflow is for Google Docs to add the bookmarks from the Table of Contents to the PDF file or create the document in one of the tools (Word, Writer, or Pages) that will generate the desired PDF. Alas, this is not possible today. Looking at the Google Support forums, it is clear this is a desired feature, so hopefully, it will appear one day.&lt;/p&gt;

&lt;p&gt;In working towards a process to produce a PDF with bookmarks for the Table of Contents, I ran into two limitations in Google Docs. The working around the first limitation&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;File → Download → PDF Document (pdf)&lt;/em&gt;: does not include the table of contents as bookmark metadata&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;has been the focus of this post.&lt;/p&gt;

&lt;p&gt;I discovered an additional problem:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;File → Down → Open Document Format (odf)&lt;/em&gt;: does not export a proper Table of Contents index structure&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This limitation (at least part of this is a bug IMO) means that the Table of Contents, made correctly in Google Docs, is not translated into Open Document Format correctly. If you try to update the index, it shows nothing. It is not surprising then that it is not available for LibreOffice Writer to export the Table of Contents information as bookmark data. LibreOffice Writer does work when using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.docx&lt;/code&gt; output file after opening and saving it in Microsoft Word but that is less useful.&lt;/p&gt;</content><author><name>David Green</name></author><category term="computing" /><category term="#fileFormat" /><summary type="html">Updated: 10 June 2020 removed LibreOffice as tool, comments about Word Online</summary></entry><entry><title type="html">Limping along with Octopress and Catalina macOS</title><link href="http://localhost:4000/blog/2019/12/16/limping-along-with-octopress-and-catalina-macos" rel="alternate" type="text/html" title="Limping along with Octopress and Catalina macOS" /><published>2019-12-16T23:46:00-06:00</published><updated>2019-12-16T23:46:00-06:00</updated><id>http://localhost:4000/blog/2019/12/16/limping-along-with-octopress-and-catalina-macos</id><content type="html" xml:base="http://localhost:4000/blog/2019/12/16/limping-along-with-octopress-and-catalina-macos">&lt;p&gt;I am still using the &lt;a href=&quot;http://octopress.org&quot;&gt;Octopress 2 framework&lt;/a&gt; for the website.  This has been challenging as the dependencies for old obsolete software gets harder and harder to satisfy.  However, it appears that I have succeed again for at least the Catalina release of macOS.&lt;/p&gt;

&lt;p&gt;I found out I had a problem when I went to fix Disqus which had moved to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://&lt;/code&gt; protocol.  I found the files named disqus.html which had &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://&lt;/code&gt; and changed it to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://&lt;/code&gt; but I was unable to regenerate the code due to a failure of the Octopress tool to run.&lt;/p&gt;

&lt;p&gt;I use&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;chruby ruby-2.2.10
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;due to the yajl-ruby which won’t build under later rubies.&lt;/p&gt;

&lt;p&gt;My already built ruby-2.2.10 would not run because the openssl 1.0 version that had been linked in had disappeared (either due to Catalina or my migration to a new MacBook Pro.)  Rebuilding ruby with&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ruby-install ruby-2.2.10
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;did not work nor did&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ruby-install ruby-2.2.10 &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--with-openssl-dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/opt/openssl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;did not work since the openssl was version 1.1.&lt;/p&gt;

&lt;p&gt;After a fair bit of false steps, the successful approach was built around Chris Hobb’s December 3, 2019 solution (for RVM) posted on &lt;a href=&quot;https://stackoverflow.com/questions/15511943/troubles-with-rvm-and-openssl&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;First follow his steps (repeated here) to install openssl 1.0.2 by downloading openssl 1.0.2 from &lt;a href=&quot;https://www.openssl.org/source/&quot;&gt;https://www.openssl.org/source/&lt;/a&gt;, and then building and installing it with&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;tar&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-xzf&lt;/span&gt; openssl-1.0.2t.tar.gz
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;openssl-1.0.2t
./Configure darwin64-x86_64-cc &lt;span class=&quot;nt&quot;&gt;--prefix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/opt/openssl@1.0
make
make &lt;span class=&quot;nb&quot;&gt;test
sudo &lt;/span&gt;make &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and then adapting to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chruby&lt;/code&gt; / &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ruby-install&lt;/code&gt; approach, build ruby 2.2.10&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ruby-install ruby-2.2.10 &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--with-openssl-dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/opt/openssl@1.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then going to the directory where I have the blog system and having previously deleted &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile.lock&lt;/code&gt;, I re-ran the install of gems into the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vendor&lt;/code&gt; directory.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Of course, in making this post, I issue&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;rake new_post[&lt;span class=&quot;s2&quot;&gt;&quot;Limping along with Octopress and Catalina macOS&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Catalina has moved to using zsh instead of bash for its default shell.  Having taken the plunge, I found out that square brackets are used differently in zsh.  I was able to escape them to continue working:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;rake new_post&lt;span class=&quot;se&quot;&gt;\[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Limping along with Octopress and Catalina macOS&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Thanks to &lt;a href=&quot;http://kinopyo.com/en/blog/escape-square-bracket-by-default-in-zsh!&quot;&gt;Qihuan Piao&lt;/a&gt; for this hint.&lt;/p&gt;

&lt;p&gt;##One less groan&lt;/p&gt;

&lt;p&gt;Evidently the version of pigments used does not know about &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zsh&lt;/code&gt; so the code blocks have to be marked as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bash&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zsh&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Time to think about a supported framework.  Perhaps a migration to the modern version of Jekyll or a broader research into other static site tools that allow markdown content.&lt;/p&gt;</content><author><name>David Green</name></author><category term="blog" /><category term="#Octopress" /><summary type="html">I am still using the Octopress 2 framework for the website. This has been challenging as the dependencies for old obsolete software gets harder and harder to satisfy. However, it appears that I have succeed again for at least the Catalina release of macOS.</summary></entry><entry><title type="html">Configuring CoolBeans 2019.6</title><link href="http://localhost:4000/blog/2019/10/17/configuring-coolbeans-2019-dot-6" rel="alternate" type="text/html" title="Configuring CoolBeans 2019.6" /><published>2019-10-17T22:29:00-05:00</published><updated>2019-10-17T22:29:00-05:00</updated><id>http://localhost:4000/blog/2019/10/17/configuring-coolbeans-2019-dot-6</id><content type="html" xml:base="http://localhost:4000/blog/2019/10/17/configuring-coolbeans-2019-dot-6">&lt;blockquote&gt;
  &lt;p&gt;Now CoolBeans has been renamed OpenBeans&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;At JDK 8, JavaFX and the JDK were together, thus already configured to build applications with both.  Since that time, they were split apart (by Oracle). Different groups took over the open-source versions of each (JDK, JavaFX, and the IDE).  Each of these components needed work, which was done on different schedules, so at this point, one has to do a bit of work to set up CoolBeans (or NetBeans) for JavaFx work.  Additionally, it has become apparent that developers need to ship the JVM with their products to reduce the pain to their users.&lt;/p&gt;

&lt;p&gt;This &lt;a href=&quot;https://gist.github.com/dgreen/e1ae4636f311d38758dafdd7b0decf0f&quot;&gt;Gist&lt;/a&gt; discusses the approach as well as provides the files used.&lt;/p&gt;

&lt;p&gt;The approach features&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;use of modular Java&lt;/li&gt;
  &lt;li&gt;latest JavaFX&lt;/li&gt;
  &lt;li&gt;integration with CoolBeans (Run, Debug, Generate JavaDoc, Test with TestNG)&lt;/li&gt;
  &lt;li&gt;an image that contains everything (for the platform it was built on) to run the program&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Testing is configured but not demoed.&lt;/p&gt;</content><author><name>David Green</name></author><category term="developer" /><category term="#application" /><category term="#Java" /><category term="#NetBeans" /><summary type="html">Now CoolBeans has been renamed OpenBeans</summary></entry><entry><title type="html">Onward to Maven in Apache NetBeans</title><link href="http://localhost:4000/blog/2019/09/15/onward-to-maven" rel="alternate" type="text/html" title="Onward to Maven in Apache NetBeans" /><published>2019-09-15T11:23:00-05:00</published><updated>2019-09-15T11:23:00-05:00</updated><id>http://localhost:4000/blog/2019/09/15/onward-to-maven</id><content type="html" xml:base="http://localhost:4000/blog/2019/09/15/onward-to-maven">&lt;blockquote&gt;
  &lt;p&gt;An update to this article is &lt;a href=&quot;/blog/2021/07/13/update-to-using-maven-to-build-executable-jar-files/&quot;&gt;available&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;At the time of writing, &lt;a href=&quot;https://netbeans.apache.org&quot;&gt;&lt;em&gt;Apache NetBeans&lt;/em&gt;&lt;/a&gt; is at version 11.1 and about 90% moved from Oracle to Apache.   As a project of the Apache Foundation, all source code must be licensed under the &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot;&gt;Apache Foundation License&lt;/a&gt;.  Of course, not all open source is licensed that way (and it was not the open source license used by Oracle) so there are some challenges to putting together large systems.  The &lt;a href=&quot;https://coolbeans.xyz&quot;&gt;CoolBeans project&lt;/a&gt; packages NetBeans, the JDK, OpenJavaFx and other components to create an integrated product that is easier to get up and running with.  I will use NetBeans as the tool in the remainder of the post.&lt;/p&gt;

&lt;p&gt;Another change made was changing the underlying preferred build automation from &lt;a href=&quot;https://ant.apache.org&quot;&gt;Apache Ant&lt;/a&gt; to &lt;a href=&quot;https://maven.apache.org&quot;&gt;Apache Maven&lt;/a&gt; for new projects.  This changes the file structure of the code as well as some details underneath.  NetBeans mostly allows the user to ignore this once the project is made.&lt;/p&gt;

&lt;p&gt;One area that is not yet polished (IMO) is the building of a &lt;em&gt;jar&lt;/em&gt; file that can be run from the command line.  The menu process “Run ▶ Clean and Build Main Project” will build a &lt;em&gt;jar&lt;/em&gt; file but it won’t configure the manifest so that&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;java -jar jarfile.jar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;works.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://www.moreofless.co.uk/executable-jar-netbeans-maven-no-main-manifest-attribute/&quot;&gt;solution was posted by Steve Claridge&lt;/a&gt; is to modify the POM (Project Object Model) file.  It is under the Project Files folder in the Project View in NetBeans.  Load the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pom.xml&lt;/code&gt; file into the NetBeans editor.&lt;/p&gt;

&lt;p&gt;Quoting from the article:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;You need to add the following XML snippet to your pom.xml, it can go anywhere inside the &lt;project&gt; element, I usually put it after the &lt;properties&gt; element:&lt;/properties&gt;&lt;/project&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;build&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;plugins&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.maven.plugins&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;maven-jar-plugin&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;2.4&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;archive&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;nt&quot;&gt;&amp;lt;manifest&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;nt&quot;&gt;&amp;lt;addClasspath&amp;gt;&lt;/span&gt;true&lt;span class=&quot;nt&quot;&gt;&amp;lt;/addClasspath&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;nt&quot;&gt;&amp;lt;mainClass&amp;gt;&lt;/span&gt;MAIN CLASS GOES HERE&lt;span class=&quot;nt&quot;&gt;&amp;lt;/mainClass&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/manifest&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/archive&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/plugins&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Just replace &lt;strong&gt;MAIN CLASS GOES HERE&lt;/strong&gt; with your main class (with it’s package prefix), rebuild and your JAR is now runnable. If you are unsure what to put here, just copy the Main Class settings from the Run tab in your Netbeans Project Properties.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After you do this, you can use “Run ▶ Clean and Build Main Project” in NetBeans to build the &lt;em&gt;jar&lt;/em&gt; file.  By changing to the Files view (instead of the Project View), you can see the target directory.&lt;/p&gt;

&lt;p&gt;The name of the &lt;em&gt;jar&lt;/em&gt; file will be dependent on your configuration, your project setup but in my habits project, it was &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;habits-1.0-SNAPSHOT.jar&lt;/code&gt; which one can run from the terminal with&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;java &lt;span class=&quot;nt&quot;&gt;-jar&lt;/span&gt; habits-1.0-SNAPSHOT.jar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;assuming that Java has been set up to run at the command line (or you are using the terminal inside NetBeans.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; that the target directory is erased as part of the clean process of “Run ▶ Clean and Build Main Project” so you will need to close anything that has files in that space open before re-running the clean process.&lt;/p&gt;</content><author><name>David Green</name></author><category term="developer" /><category term="#Java" /><category term="#NetBeans" /><summary type="html">An update to this article is available</summary></entry></feed>